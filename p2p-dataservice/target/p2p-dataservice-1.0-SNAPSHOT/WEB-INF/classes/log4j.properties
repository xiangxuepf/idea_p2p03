#配置根Logger，info默认级别；stdout,file,E  都是自定义名字；

#logger.info("slf4j message is : {}", message);
#打日志的时候使用了 {} 占位符，这样就不会有字符串拼接操作，减少了无用 String 对象的数量；
log4j.rootLogger = info, stdout, file,E
 
### \u8f93\u51fa\u5230\u63a7\u5236\u53f0 ###

#注意其语法，A.B.C;则B是C的父级；

#输出到控制台
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
#输出内容的布局格式
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout 
log4j.appender.stdout.layout.ConversionPattern = [dataservice] %d{ABSOLUTE} %5p %c{1}:%L - %m%n

#输出到某目录下的log.log文件，级别是debug
log4j.appender.file = org.apache.log4j.DailyRollingFileAppender 
log4j.appender.file.File = /opt/task/timer/logs/log.log
#Append，表示是否追加；
log4j.appender.file.Append = true
log4j.appender.file.Threshold = debug
log4j.appender.file.layout = org.apache.log4j.PatternLayout 
log4j.appender.file.layout.ConversionPattern = [dataservice] %-d{yyyy-MM-dd HH:mm:ss} [ %c{1} ] - [ %p ] %m%n
#
#
### 输出ERROR 级别以上的日志到=E://logs/error.log ###

log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =E://logs/error.log 
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern =  [dataservice] %-d{yyyy-MM-dd HH:mm:ss} [ %c{1} ] - [ %p ] %m%n